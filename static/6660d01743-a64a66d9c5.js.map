{"version":3,"sources":["webpack:///./app/scripts/analytics.js","webpack:///./node_modules/autotrack/lib/constants.js","webpack:///./node_modules/autotrack/lib/method-chain.js","webpack:///./node_modules/autotrack/lib/plugins/clean-url-tracker.js","webpack:///./node_modules/autotrack/lib/plugins/media-query-tracker.js","webpack:///./node_modules/autotrack/lib/plugins/outbound-link-tracker.js","webpack:///./node_modules/autotrack/lib/plugins/page-visibility-tracker.js","webpack:///./node_modules/autotrack/lib/provide.js","webpack:///./node_modules/autotrack/lib/session.js","webpack:///./node_modules/autotrack/lib/store.js","webpack:///./node_modules/autotrack/lib/usage.js","webpack:///./node_modules/autotrack/lib/utilities.js","webpack:///./node_modules/dom-utils/lib/get-attributes.js","webpack:///./node_modules/dom-utils/lib/parse-url.js"],"names":["dimensions","TRACKING_VERSION","CLIENT_ID","WINDOW_ID","HIT_ID","HIT_TIME","HIT_TYPE","HIT_SOURCE","VISIBILITY_STATE","URL_QUERY_PARAMS","BREAKPOINT","SELECTED_PAGE","PINNED_DEMO","metrics","__webpack_exports__","window","ga","args","q","push","createTracker","trackErrors","trackCustomDimensions","requireAutotrackPlugins","__WEBPACK_IMPORTED_MODULE_4__state_js__","on","onStateChange","oldState","state","changedProps","selectedPage","pinnedDemo","has","eventCategory","eventAction","eventLabel","isSidebarDragging","sidebarWidth","eventValue","isSidebarHidden","isNavSidebarCollapsed","isNavDrawerOpen","trackError","err","fieldsObj","Object","assign","name","message","stack","nonInteraction","process","env","NODE_ENV","model","paramsToIgnore","hitType","get","hit","split","map","decodeURIComponent","filter","item","_item$split","param","_slicedToArray","charAt","indexOf","parts","console","log","loadErrorEvents","__e","trackErrorEvent","evt","includes","error","lineno","colno","addEventListener","keys","forEach","key","tracker","_getState","set","[object Object]","uuid","originalBuildHitTask","qt","String","Date","document","visibilityState","stripQuery","queryDimensionIndex","getDefinitionIndex","trailingSlash","definitions","dimensionIndex","items","media","events","sendInitialPageview","pageLoadsMetricIndex","visibleMetricIndex","timeZone","definition","exec","b","a","Math","random","toString","replace","instances","MethodChain","context","methodName","methodOverride","getOrCreateMethodChain","add","remove","constructor","this","isTask","test","originalMethodReference","methodChain","boundMethodChain","wrappedMethod","lastBoundMethod","length","overrideMethod","rebindMethodChain","index","splice","destroy","method","i","previousMethod","bind","h","__WEBPACK_IMPORTED_MODULE_3__provide__","opts","__WEBPACK_IMPORTED_MODULE_4__usage__","CLEAN_URL_TRACKER","__WEBPACK_IMPORTED_MODULE_5__utilities__","queryDimension","trackerGetOverride","buildHitTaskOverride","__WEBPACK_IMPORTED_MODULE_2__method_chain__","originalMethod","field","location","page","cleanUrlFields","cleanedFieldsObj","url","__WEBPACK_IMPORTED_MODULE_0_dom_utils__","pathname","indexFilename","join","substr","stripNonWhitelistedQueryParams","search","slice","__WEBPACK_IMPORTED_MODULE_1__constants__","urlFieldsFilter","userCleanedFieldsObj","returnValue","searchString","Array","isArray","queryParamsWhitelist","foundParams","kv","_kv$split","_kv$split2","value","__WEBPACK_IMPORTED_MODULE_3__utilities__","__webpack_require__","mediaMap","getMediaList","matchMedia","__WEBPACK_IMPORTED_MODULE_1__provide__","__WEBPACK_IMPORTED_MODULE_2__usage__","MEDIA_QUERY_TRACKER","defaultOpts","changeTemplate","changeTimeout","changeListeners","processMediaQueries","mediaName","getMatchName","addChangeListeners","match","matches","__WEBPACK_IMPORTED_MODULE_0__constants__","mql","fn","handleChanges","addListener","newValue","oldValue","defaultFields","transport","send","hitFilter","listener","removeListener","OUTBOUND_LINK_TRACKER","linkSelector","shouldTrackOutboundLink","attributePrefix","handleLinkInteractions","delegates","event","composed","useCapture","link","href","getAttribute","type","userFields","navigator","sendBeacon","target","metaKey","ctrlKey","shiftKey","altKey","which","linkClickWillUnloadCurrentPage","clickHandler","removeEventListener","defaultPrevented","preventDefault","oldHitCallback","hitCallback","parseUrlFn","hostname","protocol","__WEBPACK_IMPORTED_MODULE_6__utilities__","HIDDEN","VISIBLE","PAGE_ID","SECONDS","__WEBPACK_IMPORTED_MODULE_2__provide__","__WEBPACK_IMPORTED_MODULE_5__usage__","PAGE_VISIBILITY_TRACKER","sessionTimeout","__WEBPACK_IMPORTED_MODULE_3__session__","DEFAULT_TIMEOUT","visibleThreshold","lastPageState","visibleThresholdTimeout_","isInitialPageviewSent_","trackerSetOverride","handleChange","handleWindowUnload","handleExternalStoreSet","store","__WEBPACK_IMPORTED_MODULE_4__store__","getOrCreate","session","__WEBPACK_IMPORTED_MODULE_1__method_chain__","sendPageview","isPageLoad","time","pageId","sessionId","getId","sendPageLoad","lastStoredChange","getAndValidateChangeData","change","clearTimeout","isExpired","clear","setTimeout","hitTime","sendPageVisibilityEvent","delta","getTimeSinceLastStoredChange","deltaInSeconds","round","queueTime","fields","newData","oldData","pluginName","pluginConstructor","gaAlias","GoogleAnalyticsObject","gaDevIds","gaplugins","__WEBPACK_IMPORTED_MODULE_1__utilities__","__WEBPACK_IMPORTED_MODULE_2__utilities__","MINUTES","Session","timeout","trackingId","sendHitTaskOverride","__WEBPACK_IMPORTED_MODULE_0__method_chain__","dateTimeFormatter","Intl","DateTimeFormat","__WEBPACK_IMPORTED_MODULE_1__store__","id","sessionData","oldHitTime","currentDate","oldHitDate","datesAreDifferentInTimezone","d1","d2","format","sessionControl","sessionWillStart","sessionWillEnd","AUTOTRACK_PREFIX","browserSupportsLocalStorage","isListening","Store","__WEBPACK_IMPORTED_MODULE_0__event_emitter__","namespace","defaults","storageListener","localStorage","setItem","removeItem","getItem","super","key_","defaults_","cache_","isSupported_","parse","get_","set_","JSON","stringify","clear_","emit","source","data","plugin","trackVersion","pluginIndex","usageBin","str","len","toAdd","padZeros","hex","parseInt","PLUGIN_COUNT","bin","trackPlugin","plugins","EVENT_TRACKER","IMPRESSION_TRACKER","OUTBOUND_FORM_TRACKER","SOCIAL_WIDGET_TRACKER","URL_CHANGE_TRACKER","MAX_SCROLL_TRACKER","buildHitTask","element","prefix","attributes","attributeFields","attribute","p1","toUpperCase","wait","callback","called","ref","queueMap","processQueue","queue","sources","prototype","hasOwnProperty","call","attrs","nodeType","attr","parseUrl","cache","port","HTTP_PORT","HTTPS_PORT","host","DEFAULT_PORT","origin","hash","RegExp","createElement"],"mappings":"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","file":"6660d01743-a64a66d9c5.js","sourcesContent":["// Import the individual autotrack plugins you want to use.\nimport 'autotrack/lib/plugins/clean-url-tracker';\nimport 'autotrack/lib/plugins/media-query-tracker';\nimport 'autotrack/lib/plugins/outbound-link-tracker';\nimport 'autotrack/lib/plugins/page-visibility-tracker';\nimport {getState, stateListener} from './state.js';\n\n\n/* global ga */\n\n\n/**\n * The tracking ID for your Google Analytics property.\n * https://support.google.com/analytics/answer/1032385\n */\nconst TRACKING_ID = 'UA-40829935-7';\n\n\n/**\n * Bump this when making backwards incompatible changes to the tracking\n * implementation. This allows you to create a segment or view filter\n * that isolates only data captured with the most recent tracking changes.\n */\nconst TRACKING_VERSION = '2';\n\n\n/**\n * A default value for dimensions so unset values always are reported as\n * something. This is needed since Google Analytics will drop empty dimension\n * values in reports.\n */\nconst NULL_VALUE = '(not set)';\n\n\n/**\n * A mapping between custom dimension names and their indexes.\n */\nconst dimensions = {\n  TRACKING_VERSION: 'dimension1',\n  CLIENT_ID: 'dimension2',\n  WINDOW_ID: 'dimension3',\n  HIT_ID: 'dimension4',\n  HIT_TIME: 'dimension5',\n  HIT_TYPE: 'dimension6',\n  HIT_SOURCE: 'dimension7',\n  VISIBILITY_STATE: 'dimension8',\n  URL_QUERY_PARAMS: 'dimension9',\n  BREAKPOINT: 'dimension10',\n  SELECTED_PAGE: 'dimension11',\n  PINNED_DEMO: 'dimension12',\n};\n\n\n/**\n * A mapping between custom metric names and their indexes.\n */\nconst metrics = {\n  PAGE_LOADS: 'metric1',\n  PAGE_VISIBLE_TIME: 'metric2',\n};\n\n\n/**\n * Initializes all the analytics setup. Creates trackers and sets initial\n * values on the trackers.\n */\nexport const init = () => {\n  // Initialize the command queue in case analytics.js hasn't loaded yet.\n  window.ga = window.ga || ((...args) => (ga.q = ga.q || []).push(args));\n\n  createTracker();\n  trackErrors();\n  trackCustomDimensions();\n  requireAutotrackPlugins();\n\n  stateListener.on('change', onStateChange);\n};\n\nconst onStateChange = (oldState, state, changedProps) => {\n  ga('set', dimensions.SELECTED_PAGE, state.selectedPage);\n  ga('set', dimensions.PINNED_DEMO, state.pinnedDemo);\n\n  if (changedProps.has('selectedPage')) {\n    ga('send', 'pageview');\n  }\n  if (changedProps.has('pinnedDemo')) {\n    ga('send', 'event', {\n      eventCategory: 'Pinned Demo',\n      eventAction: 'change',\n      eventLabel: state.pinnedDemo,\n    });\n  }\n  if (changedProps.has('isSidebarDragging')) {\n    if (!state.isSidebarDragging) {\n      ga('send', 'event', {\n        eventCategory: 'Sidebar',\n        eventAction: 'drag',\n        eventLabel: state.sidebarWidth,\n        eventValue: state.sidebarWidth,\n      });\n    }\n  }\n  if (changedProps.has('isSidebarHidden')) {\n    if (state.isSidebarHidden) {\n      ga('send', 'event', {\n        eventCategory: 'Sidebar',\n        eventAction: 'hide',\n      });\n    } else {\n      ga('send', 'event', {\n        eventCategory: 'Sidebar',\n        eventAction: 'show',\n      });\n    }\n  }\n  if (changedProps.has('isNavSidebarCollapsed')) {\n    if (state.isNavSidebarCollapsed) {\n      ga('send', 'event', {\n        eventCategory: 'Nav',\n        eventAction: 'collapse',\n      });\n    } else {\n      ga('send', 'event', {\n        eventCategory: 'Nav',\n        eventAction: 'uncollapse',\n      });\n    }\n  }\n  if (changedProps.has('isNavDrawerOpen')) {\n    if (state.isNavDrawerOpen) {\n      ga('send', 'event', {\n        eventCategory: 'Nav',\n        eventAction: 'open',\n      });\n    }\n  }\n};\n\n\n/**\n * Tracks a JavaScript error with optional fields object overrides.\n * This function is exported so it can be used in other parts of the codebase.\n * E.g.:\n *\n *    `fetch('/api.json').catch(trackError);`\n *\n * @param {(Error|Object)=} err\n * @param {Object=} fieldsObj\n */\nexport const trackError = (err = {}, fieldsObj = {}) => {\n  ga('send', 'event', Object.assign({\n    eventCategory: 'Error',\n    eventAction: err.name || '(no error name)',\n    eventLabel: `${err.message}\\n${err.stack || '(no stack trace)'}`,\n    nonInteraction: true,\n  }, fieldsObj));\n};\n\n\n/**\n * Creates the trackers and sets the default transport and tracking\n * version fields. In non-production environments it also logs hits.\n */\nconst createTracker = () => {\n  ga('create', TRACKING_ID, 'auto');\n\n  // Ensures all hits are sent via `navigator.sendBeacon()`.\n  ga('set', 'transport', 'beacon');\n\n  // Log hits in non-production environments.\n  if (process.env.NODE_ENV !== 'production') {\n    ga('set', 'sendHitTask', function(model) {\n      let paramsToIgnore = ['v', 'did', 't', 'tid', 'ec', 'ea', 'el', 'ev',\n          'a', 'z', 'ul', 'de', 'sd', 'sr', 'vp', 'je', 'fl', 'jid'];\n\n      let hitType = model.get('&t');\n      let hitPayload = model.get('hitPayload');\n      let hit = hitPayload\n          .split('&')\n          .map(decodeURIComponent)\n          .filter((item) => {\n            const [param] = item.split('=');\n            return !(param.charAt(0) === '_' ||\n                paramsToIgnore.indexOf(param) > -1);\n          });\n\n      let parts = [model.get('&tid'), hitType];\n      if (hitType === 'event') {\n        parts = [\n          ...parts,\n          model.get('&ec'),\n          model.get('&ea'),\n          model.get('&el'),\n        ];\n        if (model.get('&ev')) parts.push(model.get('&ev'));\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(...parts, hit);\n    });\n  }\n};\n\n\n/**\n * Tracks any errors that may have occured on the page prior to analytics being\n * initialized, then adds an event handler to track future errors.\n */\nconst trackErrors = () => {\n  // Errors that have occurred prior to this script running are stored on\n  // `window.__e.q`, as specified in `index.html`.\n  const loadErrorEvents = window.__e && window.__e.q || [];\n\n  const trackErrorEvent = (evt) => {\n    // Use a different eventCategory for uncaught errors.\n    const fieldsObj = {eventCategory: 'Uncaught Error'};\n\n    // Ignore the ResizeObserver loop limit exceeded error.\n    if (evt.message.includes('ResizeObserver loop limit exceeded')) {\n      return;\n    }\n\n    // Some browsers don't have an error property, so we fake it.\n    const err = evt.error || {\n      message: `${evt.message} (${evt.lineno}:${evt.colno})`,\n    };\n\n    trackError(err, fieldsObj);\n  };\n\n  // Replay any stored load error events.\n  for (let evt of loadErrorEvents) {\n    trackErrorEvent(evt);\n  }\n\n  // Add a new listener to track event immediately.\n  window.addEventListener('error', trackErrorEvent);\n};\n\n/**\n * Sets a default dimension value for all custom dimensions on all trackers.\n */\nconst trackCustomDimensions = () => {\n  // Sets a default dimension value for all custom dimensions to ensure\n  // that every dimension in every hit has *some* value. This is necessary\n  // because Google Analytics will drop rows with empty dimension values\n  // in your reports.\n  Object.keys(dimensions).forEach((key) => {\n    ga('set', dimensions[key], NULL_VALUE);\n  });\n\n  // Adds tracking of dimensions known at page load time.\n  ga((tracker) => {\n    const {selectedPage, pinnedDemo} = getState();\n    tracker.set({\n      // General dimensions\n      [dimensions.TRACKING_VERSION]: TRACKING_VERSION,\n      [dimensions.CLIENT_ID]: tracker.get('clientId'),\n      [dimensions.WINDOW_ID]: uuid(),\n      // Demo dimensions\n      [dimensions.SELECTED_PAGE]: selectedPage,\n      [dimensions.PINNED_DEMO]: pinnedDemo,\n    });\n  });\n\n  // Adds tracking to record each the type, time, uuid, and visibility state\n  // of each hit immediately before it's sent.\n  ga((tracker) => {\n    const originalBuildHitTask = tracker.get('buildHitTask');\n    tracker.set('buildHitTask', (model) => {\n      const qt = model.get('queueTime') || 0;\n      model.set(dimensions.HIT_TIME, String(new Date - qt), true);\n      model.set(dimensions.HIT_ID, uuid(), true);\n      model.set(dimensions.HIT_TYPE, model.get('hitType'), true);\n      model.set(dimensions.VISIBILITY_STATE, document.visibilityState, true);\n\n      originalBuildHitTask(model);\n    });\n  });\n};\n\n/**\n * Requires select autotrack plugins and initializes each one with its\n * respective configuration options.\n */\nconst requireAutotrackPlugins = () => {\n  ga('require', 'cleanUrlTracker', {\n    stripQuery: true,\n    queryDimensionIndex: getDefinitionIndex(dimensions.URL_QUERY_PARAMS),\n    trailingSlash: 'add',\n  });\n  ga('require', 'mediaQueryTracker', {\n    definitions: [\n      {\n        name: 'Breakpoint',\n        dimensionIndex: getDefinitionIndex(dimensions.BREAKPOINT),\n        items: [\n          {name: 'XS', media: 'all'},\n          {name: 'SM', media: '(min-width: 24em)'},\n          {name: 'MD', media: '(min-width: 36em)'},\n          {name: 'LG', media: '(min-width: 48em)'},\n          {name: 'XL', media: '(min-width: 60em)'},\n        ],\n      },\n    ],\n  });\n  ga('require', 'outboundLinkTracker', {\n    events: ['click', 'auxclick', 'contextmenu'],\n  });\n  ga('require', 'pageVisibilityTracker', {\n    sendInitialPageview: true,\n    pageLoadsMetricIndex: getDefinitionIndex(metrics.PAGE_LOADS),\n    visibleMetricIndex: getDefinitionIndex(metrics.PAGE_VISIBLE_TIME),\n    timeZone: 'America/Los_Angeles',\n    fieldsObj: {[dimensions.HIT_SOURCE]: 'pageVisibilityTracker'},\n  });\n};\n\n/**\n * Accepts a custom dimension or metric and returns it's numerical index.\n * @param {string} definition The definition string (e.g. 'dimension1').\n * @return {number} The definition index.\n */\nconst getDefinitionIndex = (definition) => +/\\d+$/.exec(definition)[0];\n\n/**\n * Generates a UUID.\n * https://gist.github.com/jed/982883\n * @param {string|undefined=} a\n * @return {string}\n */\nconst uuid = function b(a) {\n  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) :\n      ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./app/scripts/analytics.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport const VERSION = '2.4.1';\nexport const DEV_ID = 'i5iSjo';\n\nexport const VERSION_PARAM = '_av';\nexport const USAGE_PARAM = '_au';\n\nexport const NULL_DIMENSION = '(not set)';\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/constants.js","/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * The functions exported by this module make it easier (and safer) to override\n * foreign object methods (in a modular way) and respond to or modify their\n * invocation. The primary feature is the ability to override a method without\n * worrying if it's already been overridden somewhere else in the codebase. It\n * also allows for safe restoring of an overridden method by only fully\n * restoring a method once all overrides have been removed.\n */\n\n\nconst instances = [];\n\n\n/**\n * A class that wraps a foreign object method and emit events before and\n * after the original method is called.\n */\nexport default class MethodChain {\n  /**\n   * Adds the passed override method to the list of method chain overrides.\n   * @param {!Object} context The object containing the method to chain.\n   * @param {string} methodName The name of the method on the object.\n   * @param {!Function} methodOverride The override method to add.\n   */\n  static add(context, methodName, methodOverride) {\n    getOrCreateMethodChain(context, methodName).add(methodOverride);\n  }\n\n  /**\n   * Removes a method chain added via `add()`. If the override is the\n   * only override added, the original method is restored.\n   * @param {!Object} context The object containing the method to unchain.\n   * @param {string} methodName The name of the method on the object.\n   * @param {!Function} methodOverride The override method to remove.\n   */\n  static remove(context, methodName, methodOverride) {\n    getOrCreateMethodChain(context, methodName).remove(methodOverride);\n  }\n\n  /**\n   * Wraps a foreign object method and overrides it. Also stores a reference\n   * to the original method so it can be restored later.\n   * @param {!Object} context The object containing the method.\n   * @param {string} methodName The name of the method on the object.\n   */\n  constructor(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this.isTask = /Task$/.test(methodName);\n\n    this.originalMethodReference = this.isTask ?\n        context.get(methodName) : context[methodName];\n\n    this.methodChain = [];\n    this.boundMethodChain = [];\n\n    // Wraps the original method.\n    this.wrappedMethod = (...args) => {\n      const lastBoundMethod =\n          this.boundMethodChain[this.boundMethodChain.length - 1];\n\n      return lastBoundMethod(...args);\n    };\n\n    // Override original method with the wrapped one.\n    if (this.isTask) {\n      context.set(methodName, this.wrappedMethod);\n    } else {\n      context[methodName] = this.wrappedMethod;\n    }\n  }\n\n  /**\n   * Adds a method to the method chain.\n   * @param {!Function} overrideMethod The override method to add.\n   */\n  add(overrideMethod) {\n    this.methodChain.push(overrideMethod);\n    this.rebindMethodChain();\n  }\n\n  /**\n   * Removes a method from the method chain and restores the prior order.\n   * @param {!Function} overrideMethod The override method to remove.\n   */\n  remove(overrideMethod) {\n    const index = this.methodChain.indexOf(overrideMethod);\n    if (index > -1) {\n      this.methodChain.splice(index, 1);\n      if (this.methodChain.length > 0) {\n        this.rebindMethodChain();\n      } else {\n        this.destroy();\n      }\n    }\n  }\n\n  /**\n   * Loops through the method chain array and recreates the bound method\n   * chain array. This is necessary any time a method is added or removed\n   * to ensure proper original method context and order.\n   */\n  rebindMethodChain() {\n    this.boundMethodChain = [];\n    for (let method, i = 0; method = this.methodChain[i]; i++) {\n      const previousMethod = this.boundMethodChain[i - 1] ||\n          this.originalMethodReference.bind(this.context);\n      this.boundMethodChain.push(method(previousMethod));\n    }\n  }\n\n  /**\n   * Calls super and destroys the instance if no registered handlers remain.\n   */\n  destroy() {\n    const index = instances.indexOf(this);\n    if (index > -1) {\n      instances.splice(index, 1);\n      if (this.isTask) {\n        this.context.set(this.methodName, this.originalMethodReference);\n      } else {\n        this.context[this.methodName] = this.originalMethodReference;\n      }\n    }\n  }\n}\n\n\n/**\n * Gets a MethodChain instance for the passed object and method. If the method\n * has already been wrapped via an existing MethodChain instance, that\n * instance is returned.\n * @param {!Object} context The object containing the method.\n * @param {string} methodName The name of the method on the object.\n * @return {!MethodChain}\n */\nfunction getOrCreateMethodChain(context, methodName) {\n  let methodChain = instances\n      .filter((h) => h.context == context && h.methodName == methodName)[0];\n\n  if (!methodChain) {\n    methodChain = new MethodChain(context, methodName);\n    instances.push(methodChain);\n  }\n  return methodChain;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/method-chain.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {parseUrl} from 'dom-utils';\nimport {NULL_DIMENSION} from '../constants';\nimport MethodChain from '../method-chain';\nimport provide from '../provide';\nimport {plugins, trackUsage} from '../usage';\nimport {assign} from '../utilities';\n\n\n/**\n * Class for the `cleanUrlTracker` analytics.js plugin.\n * @implements {CleanUrlTrackerPublicInterface}\n */\nclass CleanUrlTracker {\n  /**\n   * Registers clean URL tracking on a tracker object. The clean URL tracker\n   * removes query parameters from the page value reported to Google Analytics.\n   * It also helps to prevent tracking similar URLs, e.g. sometimes ending a\n   * URL with a slash and sometimes not.\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?CleanUrlTrackerOpts} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.CLEAN_URL_TRACKER);\n\n    /** @type {CleanUrlTrackerOpts} */\n    const defaultOpts = {\n      // stripQuery: undefined,\n      // queryParamsWhitelist: undefined,\n      // queryDimensionIndex: undefined,\n      // indexFilename: undefined,\n      // trailingSlash: undefined,\n      // urlFilter: undefined,\n    };\n    this.opts = /** @type {CleanUrlTrackerOpts} */ (assign(defaultOpts, opts));\n\n    this.tracker = tracker;\n\n    /** @type {string|null} */\n    this.queryDimension = this.opts.stripQuery &&\n        this.opts.queryDimensionIndex ?\n            `dimension${this.opts.queryDimensionIndex}` : null;\n\n    // Binds methods to `this`.\n    this.trackerGetOverride = this.trackerGetOverride.bind(this);\n    this.buildHitTaskOverride = this.buildHitTaskOverride.bind(this);\n\n    // Override built-in tracker method to watch for changes.\n    MethodChain.add(tracker, 'get', this.trackerGetOverride);\n    MethodChain.add(tracker, 'buildHitTask', this.buildHitTaskOverride);\n  }\n\n  /**\n   * Ensures reads of the tracker object by other plugins always see the\n   * \"cleaned\" versions of all URL fields.\n   * @param {function(string):*} originalMethod A reference to the overridden\n   *     method.\n   * @return {function(string):*}\n   */\n  trackerGetOverride(originalMethod) {\n    return (field) => {\n      if (field == 'page' || field == this.queryDimension) {\n        const fieldsObj = /** @type {!FieldsObj} */ ({\n          location: originalMethod('location'),\n          page: originalMethod('page'),\n        });\n        const cleanedFieldsObj = this.cleanUrlFields(fieldsObj);\n        return cleanedFieldsObj[field];\n      } else {\n        return originalMethod(field);\n      }\n    };\n  }\n\n  /**\n   * Cleans URL fields passed in a send command.\n   * @param {function(!Model)} originalMethod A reference to the\n   *     overridden method.\n   * @return {function(!Model)}\n   */\n  buildHitTaskOverride(originalMethod) {\n    return (model) => {\n      const cleanedFieldsObj = this.cleanUrlFields({\n        location: model.get('location'),\n        page: model.get('page'),\n      });\n      model.set(cleanedFieldsObj, null, true);\n      originalMethod(model);\n    };\n  }\n\n  /**\n   * Accepts of fields object containing URL fields and returns a new\n   * fields object with the URLs \"cleaned\" according to the tracker options.\n   * @param {!FieldsObj} fieldsObj\n   * @return {!FieldsObj}\n   */\n  cleanUrlFields(fieldsObj) {\n    const url = parseUrl(\n        /** @type {string} */ (fieldsObj.page || fieldsObj.location));\n\n    let pathname = url.pathname;\n\n    // If an index filename was provided, remove it if it appears at the end\n    // of the URL.\n    if (this.opts.indexFilename) {\n      const parts = pathname.split('/');\n      if (this.opts.indexFilename == parts[parts.length - 1]) {\n        parts[parts.length - 1] = '';\n        pathname = parts.join('/');\n      }\n    }\n\n    // Ensure the URL ends with or doesn't end with slash based on the\n    // `trailingSlash` option. Note that filename URLs should never contain\n    // a trailing slash.\n    if (this.opts.trailingSlash == 'remove') {\n        pathname = pathname.replace(/\\/+$/, '');\n    } else if (this.opts.trailingSlash == 'add') {\n      const isFilename = /\\.\\w+$/.test(pathname);\n      if (!isFilename && pathname.substr(-1) != '/') {\n        pathname = pathname + '/';\n      }\n    }\n\n    /** @type {!FieldsObj} */\n    const cleanedFieldsObj = {\n      page: pathname + (this.opts.stripQuery ?\n          this.stripNonWhitelistedQueryParams(url.search) : url.search),\n    };\n    if (fieldsObj.location) {\n      cleanedFieldsObj.location = fieldsObj.location;\n    }\n    if (this.queryDimension) {\n      cleanedFieldsObj[this.queryDimension] =\n          url.search.slice(1) || NULL_DIMENSION;\n    }\n\n    // Apply the `urlFieldsFilter()` option if passed.\n    if (typeof this.opts.urlFieldsFilter == 'function') {\n      /** @type {!FieldsObj} */\n      const userCleanedFieldsObj =\n          this.opts.urlFieldsFilter(cleanedFieldsObj, parseUrl);\n\n      // Ensure only the URL fields are returned.\n      const returnValue = {\n        page: userCleanedFieldsObj.page,\n        location: userCleanedFieldsObj.location,\n      };\n      if (this.queryDimension) {\n        returnValue[this.queryDimension] =\n            userCleanedFieldsObj[this.queryDimension];\n      }\n      return returnValue;\n    } else {\n      return cleanedFieldsObj;\n    }\n  }\n\n  /**\n   * Accpets a raw URL search string and returns a new search string containing\n   * only the site search params (if they exist).\n   * @param {string} searchString The URL search string (starting with '?').\n   * @return {string} The query string\n   */\n  stripNonWhitelistedQueryParams(searchString) {\n    if (Array.isArray(this.opts.queryParamsWhitelist)) {\n      const foundParams = [];\n      searchString.slice(1).split('&').forEach((kv) => {\n        const [key, value] = kv.split('=');\n        if (this.opts.queryParamsWhitelist.indexOf(key) > -1 && value) {\n          foundParams.push([key, value]);\n        }\n      });\n\n      return foundParams.length ?\n          '?' + foundParams.map((kv) => kv.join('=')).join('&') : '';\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Restores all overridden tasks and methods.\n   */\n  remove() {\n    MethodChain.remove(this.tracker, 'get', this.trackerGetOverride);\n    MethodChain.remove(this.tracker, 'buildHitTask', this.buildHitTaskOverride);\n  }\n}\n\n\nprovide('cleanUrlTracker', CleanUrlTracker);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/plugins/clean-url-tracker.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {NULL_DIMENSION} from '../constants';\nimport provide from '../provide';\nimport {plugins, trackUsage} from '../usage';\nimport {assign, createFieldsObj,\n        debounce, isObject, toArray} from '../utilities';\n\n\n/**\n * Declares the MediaQueryList instance cache.\n */\nconst mediaMap = {};\n\n\n/**\n * Class for the `mediaQueryTracker` analytics.js plugin.\n * @implements {MediaQueryTrackerPublicInterface}\n */\nclass MediaQueryTracker {\n  /**\n   * Registers media query tracking.\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?Object} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.MEDIA_QUERY_TRACKER);\n\n    // Feature detects to prevent errors in unsupporting browsers.\n    if (!window.matchMedia) return;\n\n    /** @type {MediaQueryTrackerOpts} */\n    const defaultOpts = {\n      // definitions: unefined,\n      changeTemplate: this.changeTemplate,\n      changeTimeout: 1000,\n      fieldsObj: {},\n      // hitFilter: undefined,\n    };\n\n    this.opts = /** @type {MediaQueryTrackerOpts} */ (\n        assign(defaultOpts, opts));\n\n    // Exits early if media query data doesn't exist.\n    if (!isObject(this.opts.definitions)) return;\n\n    this.opts.definitions = toArray(this.opts.definitions);\n    this.tracker = tracker;\n    this.changeListeners = [];\n\n    this.processMediaQueries();\n  }\n\n  /**\n   * Loops through each media query definition, sets the custom dimenion data,\n   * and adds the change listeners.\n   */\n  processMediaQueries() {\n    this.opts.definitions.forEach((definition) => {\n      // Only processes definitions with a name and index.\n      if (definition.name && definition.dimensionIndex) {\n        const mediaName = this.getMatchName(definition);\n        this.tracker.set('dimension' + definition.dimensionIndex, mediaName);\n\n        this.addChangeListeners(definition);\n      }\n    });\n  }\n\n  /**\n   * Takes a definition object and return the name of the matching media item.\n   * If no match is found, the NULL_DIMENSION value is returned.\n   * @param {Object} definition A set of named media queries associated\n   *     with a single custom dimension.\n   * @return {string} The name of the matched media or NULL_DIMENSION.\n   */\n  getMatchName(definition) {\n    let match;\n\n    definition.items.forEach((item) => {\n      if (getMediaList(item.media).matches) {\n        match = item;\n      }\n    });\n    return match ? match.name : NULL_DIMENSION;\n  }\n\n  /**\n   * Adds change listeners to each media query in the definition list.\n   * Debounces the changes to prevent unnecessary hits from being sent.\n   * @param {Object} definition A set of named media queries associated\n   *     with a single custom dimension\n   */\n  addChangeListeners(definition) {\n    definition.items.forEach((item) => {\n      const mql = getMediaList(item.media);\n      const fn = debounce(() => {\n        this.handleChanges(definition);\n      }, this.opts.changeTimeout);\n\n      mql.addListener(fn);\n      this.changeListeners.push({mql, fn});\n    });\n  }\n\n  /**\n   * Handles changes to the matched media. When the new value differs from\n   * the old value, a change event is sent.\n   * @param {Object} definition A set of named media queries associated\n   *     with a single custom dimension\n   */\n  handleChanges(definition) {\n    const newValue = this.getMatchName(definition);\n    const oldValue = this.tracker.get('dimension' + definition.dimensionIndex);\n\n    if (newValue !== oldValue) {\n      this.tracker.set('dimension' + definition.dimensionIndex, newValue);\n\n      /** @type {FieldsObj} */\n      const defaultFields = {\n        transport: 'beacon',\n        eventCategory: definition.name,\n        eventAction: 'change',\n        eventLabel: this.opts.changeTemplate(oldValue, newValue),\n        nonInteraction: true,\n      };\n      this.tracker.send('event', createFieldsObj(defaultFields,\n          this.opts.fieldsObj, this.tracker, this.opts.hitFilter));\n    }\n  }\n\n  /**\n   * Removes all event listeners and instance properties.\n   */\n  remove() {\n    for (let i = 0, listener; listener = this.changeListeners[i]; i++) {\n      listener.mql.removeListener(listener.fn);\n    }\n  }\n\n  /**\n   * Sets the default formatting of the change event label.\n   * This can be overridden by setting the `changeTemplate` option.\n   * @param {string} oldValue The value of the media query prior to the change.\n   * @param {string} newValue The value of the media query after the change.\n   * @return {string} The formatted event label.\n   */\n  changeTemplate(oldValue, newValue) {\n    return oldValue + ' => ' + newValue;\n  }\n}\n\n\nprovide('mediaQueryTracker', MediaQueryTracker);\n\n\n/**\n * Accepts a media query and returns a MediaQueryList object.\n * Caches the values to avoid multiple unnecessary instances.\n * @param {string} media A media query value.\n * @return {MediaQueryList} The matched media.\n */\nfunction getMediaList(media) {\n  return mediaMap[media] || (mediaMap[media] = window.matchMedia(media));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/plugins/media-query-tracker.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {delegate, parseUrl} from 'dom-utils';\nimport provide from '../provide';\nimport {plugins, trackUsage} from '../usage';\nimport {assign, createFieldsObj,\n        getAttributeFields, withTimeout} from '../utilities';\n\n\n/**\n * Class for the `outboundLinkTracker` analytics.js plugin.\n * @implements {OutboundLinkTrackerPublicInterface}\n */\nclass OutboundLinkTracker {\n  /**\n   * Registers outbound link tracking on a tracker object.\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?Object} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.OUTBOUND_LINK_TRACKER);\n\n    // Feature detects to prevent errors in unsupporting browsers.\n    if (!window.addEventListener) return;\n\n    /** @type {OutboundLinkTrackerOpts} */\n    const defaultOpts = {\n      events: ['click'],\n      linkSelector: 'a, area',\n      shouldTrackOutboundLink: this.shouldTrackOutboundLink,\n      fieldsObj: {},\n      attributePrefix: 'ga-',\n      // hitFilter: undefined,\n    };\n\n    this.opts = /** @type {OutboundLinkTrackerOpts} */ (\n        assign(defaultOpts, opts));\n\n    this.tracker = tracker;\n\n    // Binds methods.\n    this.handleLinkInteractions = this.handleLinkInteractions.bind(this);\n\n    // Creates a mapping of events to their delegates\n    this.delegates = {};\n    this.opts.events.forEach((event) => {\n      this.delegates[event] = delegate(document, event, this.opts.linkSelector,\n          this.handleLinkInteractions, {composed: true, useCapture: true});\n    });\n  }\n\n  /**\n   * Handles all interactions on link elements. A link is considered an outbound\n   * link if its hostname property does not match location.hostname. When the\n   * beacon transport method is not available, the links target is set to\n   * \"_blank\" to ensure the hit can be sent.\n   * @param {Event} event The DOM click event.\n   * @param {Element} link The delegated event target.\n   */\n  handleLinkInteractions(event, link) {\n    if (this.opts.shouldTrackOutboundLink(link, parseUrl)) {\n      const href = link.getAttribute('href') || link.getAttribute('xlink:href');\n      const url = parseUrl(href);\n\n      /** @type {FieldsObj} */\n      const defaultFields = {\n        transport: 'beacon',\n        eventCategory: 'Outbound Link',\n        eventAction: event.type,\n        eventLabel: url.href,\n      };\n\n      /** @type {FieldsObj} */\n      const userFields = assign({}, this.opts.fieldsObj,\n          getAttributeFields(link, this.opts.attributePrefix));\n\n      const fieldsObj = createFieldsObj(defaultFields, userFields,\n          this.tracker, this.opts.hitFilter, link, event);\n\n      if (!navigator.sendBeacon &&\n          linkClickWillUnloadCurrentPage(event, link)) {\n        // Adds a new event handler at the last minute to minimize the chances\n        // that another event handler for this click will run after this logic.\n        const clickHandler = () => {\n          window.removeEventListener('click', clickHandler);\n\n          // Checks to make sure another event handler hasn't already prevented\n          // the default action. If it has the custom redirect isn't needed.\n          if (!event.defaultPrevented) {\n            // Stops the click and waits until the hit is complete (with\n            // timeout) for browsers that don't support beacon.\n            event.preventDefault();\n\n            const oldHitCallback = fieldsObj.hitCallback;\n            fieldsObj.hitCallback = withTimeout(function() {\n              if (typeof oldHitCallback == 'function') oldHitCallback();\n              location.href = href;\n            });\n          }\n          this.tracker.send('event', fieldsObj);\n        };\n        window.addEventListener('click', clickHandler);\n      } else {\n        this.tracker.send('event', fieldsObj);\n      }\n    }\n  }\n\n  /**\n   * Determines whether or not the tracker should send a hit when a link is\n   * clicked. By default links with a hostname property not equal to the current\n   * hostname are tracked.\n   * @param {Element} link The link that was clicked on.\n   * @param {Function} parseUrlFn A cross-browser utility method for url\n   *     parsing (note: renamed to disambiguate when compiling).\n   * @return {boolean} Whether or not the link should be tracked.\n   */\n  shouldTrackOutboundLink(link, parseUrlFn) {\n    const href = link.getAttribute('href') || link.getAttribute('xlink:href');\n    const url = parseUrlFn(href);\n    return url.hostname != location.hostname &&\n        url.protocol.slice(0, 4) == 'http';\n  }\n\n  /**\n   * Removes all event listeners and instance properties.\n   */\n  remove() {\n    Object.keys(this.delegates).forEach((key) => {\n      this.delegates[key].destroy();\n    });\n  }\n}\n\n\nprovide('outboundLinkTracker', OutboundLinkTracker);\n\n\n/**\n * Determines if a link click event will cause the current page to upload.\n * Note: most link clicks *will* cause the current page to unload because they\n * initiate a page navigation. The most common reason a link click won't cause\n * the page to unload is if the clicked was to open the link in a new tab.\n * @param {Event} event The DOM event.\n * @param {Element} link The link element clicked on.\n * @return {boolean} True if the current page will be unloaded.\n */\nfunction linkClickWillUnloadCurrentPage(event, link) {\n  return !(\n      // The event type can be customized; we only care about clicks here.\n      event.type != 'click' ||\n      // Links with target=\"_blank\" set will open in a new window/tab.\n      link.target == '_blank' ||\n      // On mac, command clicking will open a link in a new tab. Control\n      // clicking does this on windows.\n      event.metaKey || event.ctrlKey ||\n      // Shift clicking in Chrome/Firefox opens the link in a new window\n      // In Safari it adds the URL to a favorites list.\n      event.shiftKey ||\n      // On Mac, clicking with the option key is used to download a resouce.\n      event.altKey ||\n      // Middle mouse button clicks (which == 2) are used to open a link\n      // in a new tab, and right clicks (which == 3) on Firefox trigger\n      // a click event.\n      event.which > 1);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/plugins/outbound-link-tracker.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {NULL_DIMENSION} from '../constants';\nimport MethodChain from '../method-chain';\nimport provide from '../provide';\nimport Session from '../session';\nimport Store from '../store';\nimport {plugins, trackUsage} from '../usage';\nimport {assign, createFieldsObj, deferUntilPluginsLoaded,\n    isObject, now, uuid} from '../utilities';\n\n\nconst HIDDEN = 'hidden';\nconst VISIBLE = 'visible';\nconst PAGE_ID = uuid();\nconst SECONDS = 1000;\n\n\n/**\n * Class for the `pageVisibilityTracker` analytics.js plugin.\n * @implements {PageVisibilityTrackerPublicInterface}\n */\nclass PageVisibilityTracker {\n  /**\n   * Registers outbound link tracking on tracker object.\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?Object} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.PAGE_VISIBILITY_TRACKER);\n\n    // Feature detects to prevent errors in unsupporting browsers.\n    if (!document.visibilityState) return;\n\n    /** @type {PageVisibilityTrackerOpts} */\n    const defaultOpts = {\n      sessionTimeout: Session.DEFAULT_TIMEOUT,\n      visibleThreshold: 5 * SECONDS,\n      // timeZone: undefined,\n      sendInitialPageview: false,\n      // pageLoadsMetricIndex: undefined,\n      // visibleMetricIndex: undefined,\n      fieldsObj: {},\n      // hitFilter: undefined\n    };\n\n    this.opts = /** @type {PageVisibilityTrackerOpts} */ (\n        assign(defaultOpts, opts));\n\n    this.tracker = tracker;\n    this.lastPageState = document.visibilityState;\n    this.visibleThresholdTimeout_ = null;\n    this.isInitialPageviewSent_ = false;\n\n    // Binds methods to `this`.\n    this.trackerSetOverride = this.trackerSetOverride.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleWindowUnload = this.handleWindowUnload.bind(this);\n    this.handleExternalStoreSet = this.handleExternalStoreSet.bind(this);\n\n    // Creates the store and binds storage change events.\n    this.store = Store.getOrCreate(\n        tracker.get('trackingId'), 'plugins/page-visibility-tracker');\n    this.store.on('externalSet', this.handleExternalStoreSet);\n\n    // Creates the session and binds session events.\n    this.session = Session.getOrCreate(\n        tracker, this.opts.sessionTimeout, this.opts.timeZone);\n\n    // Override the built-in tracker.set method to watch for changes.\n    MethodChain.add(tracker, 'set', this.trackerSetOverride);\n\n    window.addEventListener('unload', this.handleWindowUnload);\n    document.addEventListener('visibilitychange', this.handleChange);\n\n    // Postpone sending any hits until the next call stack, which allows all\n    // autotrack plugins to be required sync before any hits are sent.\n    deferUntilPluginsLoaded(this.tracker, () => {\n      if (document.visibilityState == VISIBLE) {\n        if (this.opts.sendInitialPageview) {\n          this.sendPageview({isPageLoad: true});\n          this.isInitialPageviewSent_ = true;\n        }\n        this.store.set(/** @type {PageVisibilityStoreData} */ ({\n          time: now(),\n          state: VISIBLE,\n          pageId: PAGE_ID,\n          sessionId: this.session.getId(),\n        }));\n      } else {\n        if (this.opts.sendInitialPageview && this.opts.pageLoadsMetricIndex) {\n          this.sendPageLoad();\n        }\n      }\n    });\n  }\n\n  /**\n   * Inspects the last visibility state change data and determines if a\n   * visibility event needs to be tracked based on the current visibility\n   * state and whether or not the session has expired. If the session has\n   * expired, a change to `visible` will trigger an additional pageview.\n   * This method also sends as the event value (and optionally a custom metric)\n   * the elapsed time between this event and the previously reported change\n   * in the same session, allowing you to more accurately determine when users\n   * were actually looking at your page versus when it was in the background.\n   */\n  handleChange() {\n    if (!(document.visibilityState == VISIBLE ||\n        document.visibilityState == HIDDEN)) {\n      return;\n    }\n\n    const lastStoredChange = this.getAndValidateChangeData();\n\n    /** @type {PageVisibilityStoreData} */\n    const change = {\n      time: now(),\n      state: document.visibilityState,\n      pageId: PAGE_ID,\n      sessionId: this.session.getId(),\n    };\n\n    // If the visibilityState has changed to visible and the initial pageview\n    // has not been sent (and the `sendInitialPageview` option is `true`).\n    // Send the initial pageview now.\n    if (document.visibilityState == VISIBLE &&\n        this.opts.sendInitialPageview && !this.isInitialPageviewSent_) {\n      this.sendPageview();\n      this.isInitialPageviewSent_ = true;\n    }\n\n    // If the visibilityState has changed to hidden, clear any scheduled\n    // pageviews waiting for the visibleThreshold timeout.\n    if (document.visibilityState == HIDDEN && this.visibleThresholdTimeout_) {\n      clearTimeout(this.visibleThresholdTimeout_);\n    }\n\n    if (this.session.isExpired(lastStoredChange.sessionId)) {\n      this.store.clear();\n      if (this.lastPageState == HIDDEN &&\n          document.visibilityState == VISIBLE) {\n        // If the session has expired, changes from hidden to visible should\n        // be considered a new pageview rather than a visibility event.\n        // This behavior ensures all sessions contain a pageview so\n        // session-level page dimensions and metrics (e.g. ga:landingPagePath\n        // and ga:entrances) are correct.\n        // Also, in order to prevent false positives, we add a small timeout\n        // that is cleared if the visibilityState changes to hidden shortly\n        // after the change to visible. This can happen if a user is quickly\n        // switching through their open tabs but not actually interacting with\n        // and of them. It can also happen when a user goes to a tab just to\n        // immediately close it. Such cases should not be considered pageviews.\n        clearTimeout(this.visibleThresholdTimeout_);\n        this.visibleThresholdTimeout_ = setTimeout(() => {\n          this.store.set(change);\n          this.sendPageview({hitTime: change.time});\n        }, this.opts.visibleThreshold);\n      }\n    } else {\n      if (lastStoredChange.pageId == PAGE_ID &&\n          lastStoredChange.state == VISIBLE) {\n        this.sendPageVisibilityEvent(lastStoredChange);\n      }\n      this.store.set(change);\n    }\n\n    this.lastPageState = document.visibilityState;\n  }\n\n  /**\n   * Retroactively updates the stored change data in cases where it's known to\n   * be out of sync.\n   * This plugin keeps track of each visiblity change and stores the last one\n   * in localStorage. LocalStorage is used to handle situations where the user\n   * has multiple page open at the same time and we don't want to\n   * double-report page visibility in those cases.\n   * However, a problem can occur if a user closes a page when one or more\n   * visible pages are still open. In such cases it's impossible to know\n   * which of the remaining pages the user will interact with next.\n   * To solve this problem we wait for the next change on any page and then\n   * retroactively update the stored data to reflect the current page as being\n   * the page on which the last change event occured and measure visibility\n   * from that point.\n   * @return {!PageVisibilityStoreData}\n   */\n  getAndValidateChangeData() {\n    const lastStoredChange =\n        /** @type {PageVisibilityStoreData} */ (this.store.get());\n\n    if (this.lastPageState == VISIBLE &&\n        lastStoredChange.state == HIDDEN &&\n        lastStoredChange.pageId != PAGE_ID) {\n      lastStoredChange.state = VISIBLE;\n      lastStoredChange.pageId = PAGE_ID;\n      this.store.set(lastStoredChange);\n    }\n    return lastStoredChange;\n  }\n\n  /**\n   * Sends a Page Visibility event to track the time this page was in the\n   * visible state (assuming it was in that state long enough to meet the\n   * threshold).\n   * @param {!PageVisibilityStoreData} lastStoredChange\n   * @param {{hitTime: (number|undefined)}=} param1\n   *     - hitTime: A hit timestap used to help ensure original order in cases\n   *                where the send is delayed.\n   */\n  sendPageVisibilityEvent(lastStoredChange, {hitTime} = {}) {\n    const delta = this.getTimeSinceLastStoredChange(\n        lastStoredChange, {hitTime});\n\n    // If the detla is greater than the visibileThreshold, report it.\n    if (delta && delta >= this.opts.visibleThreshold) {\n      const deltaInSeconds = Math.round(delta / SECONDS);\n\n      /** @type {FieldsObj} */\n      const defaultFields = {\n        transport: 'beacon',\n        nonInteraction: true,\n        eventCategory: 'Page Visibility',\n        eventAction: 'track',\n        eventValue: deltaInSeconds,\n        eventLabel: NULL_DIMENSION,\n      };\n\n      if (hitTime) {\n        defaultFields.queueTime = now() - hitTime;\n      }\n\n      // If a custom metric was specified, set it equal to the event value.\n      if (this.opts.visibleMetricIndex) {\n        defaultFields['metric' + this.opts.visibleMetricIndex] = deltaInSeconds;\n      }\n\n      this.tracker.send('event',\n          createFieldsObj(defaultFields, this.opts.fieldsObj,\n              this.tracker, this.opts.hitFilter));\n    }\n  }\n\n  /**\n   * Sends a page load event.\n   */\n  sendPageLoad() {\n    /** @type {FieldsObj} */\n    const defaultFields = {\n      transport: 'beacon',\n      eventCategory: 'Page Visibility',\n      eventAction: 'page load',\n      eventLabel: NULL_DIMENSION,\n      ['metric' + this.opts.pageLoadsMetricIndex]: 1,\n      nonInteraction: true,\n    };\n    this.tracker.send('event',\n        createFieldsObj(defaultFields, this.opts.fieldsObj,\n            this.tracker, this.opts.hitFilter));\n  }\n\n  /**\n   * Sends a pageview, optionally calculating an offset if hitTime is passed.\n   * @param {{\n   *   hitTime: (number|undefined),\n   *   isPageLoad: (boolean|undefined)\n   * }=} param1\n   *     hitTime: The timestamp of the current hit.\n   *     isPageLoad: True if this pageview was also a page load.\n   */\n  sendPageview({hitTime, isPageLoad} = {}) {\n    /** @type {FieldsObj} */\n    const defaultFields = {transport: 'beacon'};\n    if (hitTime) {\n      defaultFields.queueTime = now() - hitTime;\n    }\n    if (isPageLoad && this.opts.pageLoadsMetricIndex) {\n      defaultFields['metric' + this.opts.pageLoadsMetricIndex] = 1;\n    }\n\n    this.tracker.send('pageview',\n        createFieldsObj(defaultFields, this.opts.fieldsObj,\n            this.tracker, this.opts.hitFilter));\n  }\n\n  /**\n   * Detects changes to the tracker object and triggers an update if the page\n   * field has changed.\n   * @param {function((Object|string), (string|undefined))} originalMethod\n   *     A reference to the overridden method.\n   * @return {function((Object|string), (string|undefined))}\n   */\n  trackerSetOverride(originalMethod) {\n    return (field, value) => {\n      /** @type {!FieldsObj} */\n      const fields = isObject(field) ? field : {[field]: value};\n      if (fields.page && fields.page !== this.tracker.get('page')) {\n        if (this.lastPageState == VISIBLE) {\n          this.handleChange();\n        }\n      }\n      originalMethod(field, value);\n    };\n  }\n\n  /**\n   * Calculates the time since the last visibility change event in the current\n   * session. If the session has expired the reported time is zero.\n   * @param {PageVisibilityStoreData} lastStoredChange\n   * @param {{hitTime: (number|undefined)}=} param1\n   *     hitTime: The time of the current hit (defaults to now).\n   * @return {number} The time (in ms) since the last change.\n   */\n  getTimeSinceLastStoredChange(lastStoredChange, {hitTime} = {}) {\n    return lastStoredChange.time ?\n        (hitTime || now()) - lastStoredChange.time : 0;\n  }\n\n  /**\n   * Handles responding to the `storage` event.\n   * The code on this page needs to be informed when other tabs or windows are\n   * updating the stored page visibility state data. This method checks to see\n   * if a hidden state is stored when there are still visible tabs open, which\n   * can happen if multiple windows are open at the same time.\n   * @param {PageVisibilityStoreData} newData\n   * @param {PageVisibilityStoreData} oldData\n   */\n  handleExternalStoreSet(newData, oldData) {\n    // If the change times are the same, then the previous write only\n    // updated the active page ID. It didn't enter a new state and thus no\n    // hits should be sent.\n    if (newData.time == oldData.time) return;\n\n    // Page Visibility events must be sent by the tracker on the page\n    // where the original event occurred. So if a change happens on another\n    // page, but this page is where the previous change event occurred, then\n    // this page is the one that needs to send the event (so all dimension\n    // data is correct).\n    if (oldData.pageId == PAGE_ID &&\n        oldData.state == VISIBLE &&\n        !this.session.isExpired(oldData.sessionId)) {\n      this.sendPageVisibilityEvent(oldData, {hitTime: newData.time});\n    }\n  }\n\n  /**\n   * Handles responding to the `unload` event.\n   * Since some browsers don't emit a `visibilitychange` event in all cases\n   * where a page might be unloaded, it's necessary to hook into the `unload`\n   * event to ensure the correct state is always stored.\n   */\n  handleWindowUnload() {\n    // If the stored visibility state isn't hidden when the unload event\n    // fires, it means the visibilitychange event didn't fire as the document\n    // was being unloaded, so we invoke it manually.\n    if (this.lastPageState != HIDDEN) {\n      this.handleChange();\n    }\n  }\n\n  /**\n   * Removes all event listeners and restores overridden methods.\n   */\n  remove() {\n    this.store.destroy();\n    this.session.destroy();\n    MethodChain.remove(this.tracker, 'set', this.trackerSetOverride);\n    window.removeEventListener('unload', this.handleWindowUnload);\n    document.removeEventListener('visibilitychange', this.handleChange);\n  }\n}\n\n\nprovide('pageVisibilityTracker', PageVisibilityTracker);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/plugins/page-visibility-tracker.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {DEV_ID} from './constants';\nimport {capitalize} from './utilities';\n\n\n/**\n * Provides a plugin for use with analytics.js, accounting for the possibility\n * that the global command queue has been renamed or not yet defined.\n * @param {string} pluginName The plugin name identifier.\n * @param {Function} pluginConstructor The plugin constructor function.\n */\nexport default function provide(pluginName, pluginConstructor) {\n  const gaAlias = window.GoogleAnalyticsObject || 'ga';\n  window[gaAlias] = window[gaAlias] || function(...args) {\n    (window[gaAlias].q = window[gaAlias].q || []).push(args);\n  };\n\n  // Adds the autotrack dev ID if not already included.\n  window.gaDevIds = window.gaDevIds || [];\n  if (window.gaDevIds.indexOf(DEV_ID) < 0) {\n    window.gaDevIds.push(DEV_ID);\n  }\n\n  // Formally provides the plugin for use with analytics.js.\n  window[gaAlias]('provide', pluginName, pluginConstructor);\n\n  // Registers the plugin on the global gaplugins object.\n  window.gaplugins = window.gaplugins || {};\n  window.gaplugins[capitalize(pluginName)] = pluginConstructor;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/provide.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport MethodChain from './method-chain';\nimport Store from './store';\nimport {now, uuid} from './utilities';\n\n\nconst SECONDS = 1000;\nconst MINUTES = 60 * SECONDS;\n\n\nconst instances = {};\n\n\n/**\n * A session management class that helps track session boundaries\n * across multiple open tabs/windows.\n */\nexport default class Session {\n  /**\n   * Gets an existing instance for the passed arguments or creates a new\n   * instance if one doesn't exist.\n   * @param {!Tracker} tracker An analytics.js tracker object.\n   * @param {number} timeout The session timeout (in minutes). This value\n   *     should match what's set in the \"Session settings\" section of the\n   *     Google Analytics admin.\n   * @param {string=} timeZone The optional IANA time zone of the view. This\n   *     value should match what's set in the \"View settings\" section of the\n   *     Google Analytics admin. (Note: this assumes all views for the property\n   *     use the same time zone. If that's not true, it's better not to use\n   *     this feature).\n   * @return {Session} The Session instance.\n   */\n  static getOrCreate(tracker, timeout, timeZone) {\n    // Don't create multiple instances for the same property.\n    const trackingId = tracker.get('trackingId');\n    if (instances[trackingId]) {\n      return instances[trackingId];\n    } else {\n      return instances[trackingId] = new Session(tracker, timeout, timeZone);\n    }\n  }\n\n  /**\n   * @param {!Tracker} tracker An analytics.js tracker object.\n   * @param {number} timeout The session timeout (in minutes). This value\n   *     should match what's set in the \"Session settings\" section of the\n   *     Google Analytics admin.\n   * @param {string=} timeZone The optional IANA time zone of the view. This\n   *     value should match what's set in the \"View settings\" section of the\n   *     Google Analytics admin. (Note: this assumes all views for the property\n   *     use the same time zone. If that's not true, it's better not to use\n   *     this feature).\n   */\n  constructor(tracker, timeout, timeZone) {\n    this.tracker = tracker;\n    this.timeout = timeout || Session.DEFAULT_TIMEOUT;\n    this.timeZone = timeZone;\n\n    // Binds methods.\n    this.sendHitTaskOverride = this.sendHitTaskOverride.bind(this);\n\n    // Overrides into the trackers sendHitTask method.\n    MethodChain.add(tracker, 'sendHitTask', this.sendHitTaskOverride);\n\n    // Some browser doesn't support various features of the\n    // `Intl.DateTimeFormat` API, so we have to try/catch it. Consequently,\n    // this allows us to assume the presence of `this.dateTimeFormatter` means\n    // it works in the current browser.\n    try {\n      this.dateTimeFormatter =\n          new Intl.DateTimeFormat('en-US', {timeZone: this.timeZone});\n    } catch(err) {\n      // Do nothing.\n    }\n\n    /** @type {SessionStoreData} */\n    const defaultProps = {\n      hitTime: 0,\n      isExpired: false,\n    };\n    this.store = Store.getOrCreate(\n        tracker.get('trackingId'), 'session', defaultProps);\n\n    // Ensure the session has an ID.\n    if (!this.store.get().id) {\n      this.store.set(/** @type {SessionStoreData} */ ({id: uuid()}));\n    }\n  }\n\n  /**\n   * Returns the ID of the current session.\n   * @return {string}\n   */\n  getId() {\n    return this.store.get().id;\n  }\n\n  /**\n   * Accepts a session ID and returns true if the specified session has\n   * evidentially expired. A session can expire for two reasons:\n   *   - More than 30 minutes has elapsed since the previous hit\n   *     was sent (The 30 minutes number is the Google Analytics default, but\n   *     it can be modified in GA admin \"Session settings\").\n   *   - A new day has started since the previous hit, in the\n   *     specified time zone (should correspond to the time zone of the\n   *     property's views).\n   *\n   * Note: since real session boundaries are determined at processing time,\n   * this is just a best guess rather than a source of truth.\n   *\n   * @param {string} id The ID of a session to check for expiry.\n   * @return {boolean} True if the session has not exp\n   */\n  isExpired(id = this.getId()) {\n    // If a session ID is passed and it doesn't match the current ID,\n    // assume it's from an expired session. If no ID is passed, assume the ID\n    // of the current session.\n    if (id != this.getId()) return true;\n\n    /** @type {SessionStoreData} */\n    const sessionData = this.store.get();\n\n    // `isExpired` will be `true` if the sessionControl field was set to\n    // 'end' on the previous hit.\n    if (sessionData.isExpired) return true;\n\n    const oldHitTime = sessionData.hitTime;\n\n    // Only consider a session expired if previous hit time data exists, and\n    // the previous hit time is greater than that session timeout period or\n    // the hits occurred on different days in the session timezone.\n    if (oldHitTime) {\n      const currentDate = new Date();\n      const oldHitDate = new Date(oldHitTime);\n      if (currentDate - oldHitDate > (this.timeout * MINUTES) ||\n          this.datesAreDifferentInTimezone(currentDate, oldHitDate)) {\n        return true;\n      }\n    }\n\n    // For all other cases return false.\n    return false;\n  }\n\n  /**\n   * Returns true if (and only if) the timezone date formatting is supported\n   * in the current browser and if the two dates are definitively not the\n   * same date in the session timezone. Anything short of this returns false.\n   * @param {!Date} d1\n   * @param {!Date} d2\n   * @return {boolean}\n   */\n  datesAreDifferentInTimezone(d1, d2) {\n    if (!this.dateTimeFormatter) {\n      return false;\n    } else {\n      return this.dateTimeFormatter.format(d1)\n          != this.dateTimeFormatter.format(d2);\n    }\n  }\n\n  /**\n   * Keeps track of when the previous hit was sent to determine if a session\n   * has expired. Also inspects the `sessionControl` field to handles\n   * expiration accordingly.\n   * @param {function(!Model)} originalMethod A reference to the overridden\n   *     method.\n   * @return {function(!Model)}\n   */\n  sendHitTaskOverride(originalMethod) {\n    return (model) => {\n      originalMethod(model);\n\n      const sessionControl = model.get('sessionControl');\n      const sessionWillStart = sessionControl == 'start' || this.isExpired();\n      const sessionWillEnd = sessionControl == 'end';\n\n      /** @type {SessionStoreData} */\n      const sessionData = this.store.get();\n      sessionData.hitTime = now();\n      if (sessionWillStart) {\n        sessionData.isExpired = false;\n        sessionData.id = uuid();\n      }\n      if (sessionWillEnd) {\n        sessionData.isExpired = true;\n      }\n      this.store.set(sessionData);\n    };\n  }\n\n  /**\n   * Restores the tracker's original `sendHitTask` to the state before\n   * session control was initialized and removes this instance from the global\n   * store.\n   */\n  destroy() {\n    MethodChain.remove(this.tracker, 'sendHitTask', this.sendHitTaskOverride);\n    this.store.destroy();\n    delete instances[this.tracker.get('trackingId')];\n  }\n}\n\n\nSession.DEFAULT_TIMEOUT = 30; // minutes\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/session.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport EventEmitter from './event-emitter';\nimport {assign} from './utilities';\n\n\nconst AUTOTRACK_PREFIX = 'autotrack';\nconst instances = {};\nlet isListening = false;\n\n\n/** @type {boolean|undefined} */\nlet browserSupportsLocalStorage;\n\n\n/**\n * A storage object to simplify interacting with localStorage.\n */\nexport default class Store extends EventEmitter {\n  /**\n   * Gets an existing instance for the passed arguements or creates a new\n   * instance if one doesn't exist.\n   * @param {string} trackingId The tracking ID for the GA property.\n   * @param {string} namespace A namespace unique to this store.\n   * @param {Object=} defaults An optional object of key/value defaults.\n   * @return {Store} The Store instance.\n   */\n  static getOrCreate(trackingId, namespace, defaults) {\n    const key = [AUTOTRACK_PREFIX, trackingId, namespace].join(':');\n\n    // Don't create multiple instances for the same tracking Id and namespace.\n    if (!instances[key]) {\n      instances[key] = new Store(key, defaults);\n      if (!isListening) initStorageListener();\n    }\n    return instances[key];\n  }\n\n  /**\n   * Returns true if the browser supports and can successfully write to\n   * localStorage. The results is cached so this method can be invoked many\n   * times with no extra performance cost.\n   * @private\n   * @return {boolean}\n   */\n  static isSupported_() {\n    if (browserSupportsLocalStorage != null) {\n      return browserSupportsLocalStorage;\n    }\n\n    try {\n      window.localStorage.setItem(AUTOTRACK_PREFIX, AUTOTRACK_PREFIX);\n      window.localStorage.removeItem(AUTOTRACK_PREFIX);\n      browserSupportsLocalStorage = true;\n    } catch (err) {\n      browserSupportsLocalStorage = false;\n    }\n    return browserSupportsLocalStorage;\n  }\n\n  /**\n   * Wraps the native localStorage method for each stubbing in tests.\n   * @private\n   * @param {string} key The store key.\n   * @return {string|null} The stored value.\n   */\n  static get_(key) {\n    return window.localStorage.getItem(key);\n  }\n\n  /**\n   * Wraps the native localStorage method for each stubbing in tests.\n   * @private\n   * @param {string} key The store key.\n   * @param {string} value The value to store.\n   */\n  static set_(key, value) {\n    window.localStorage.setItem(key, value);\n  }\n\n  /**\n   * Wraps the native localStorage method for each stubbing in tests.\n   * @private\n   * @param {string} key The store key.\n   */\n  static clear_(key) {\n    window.localStorage.removeItem(key);\n  }\n\n  /**\n   * @param {string} key A key unique to this store.\n   * @param {Object=} defaults An optional object of key/value defaults.\n   */\n  constructor(key, defaults = {}) {\n    super();\n    this.key_ = key;\n    this.defaults_ = defaults;\n\n    /** @type {?Object} */\n    this.cache_ = null; // Will be set after the first get.\n  }\n\n  /**\n   * Gets the data stored in localStorage for this store. If the cache is\n   * already populated, return it as is (since it's always kept up-to-date\n   * and in sync with activity in other windows via the `storage` event).\n   * TODO(philipwalton): Implement schema migrations if/when a new\n   * schema version is introduced.\n   * @return {!Object} The stored data merged with the defaults.\n   */\n  get() {\n    if (this.cache_) {\n      return this.cache_;\n    } else {\n      if (Store.isSupported_()) {\n        try {\n          this.cache_ = parse(Store.get_(this.key_));\n        } catch(err) {\n          // Do nothing.\n        }\n      }\n      return this.cache_ = assign({}, this.defaults_, this.cache_);\n    }\n  }\n\n  /**\n   * Saves the passed data object to localStorage,\n   * merging it with the existing data.\n   * @param {Object} newData The data to save.\n   */\n  set(newData) {\n    this.cache_ = assign({}, this.defaults_, this.cache_, newData);\n\n    if (Store.isSupported_()) {\n      try {\n        Store.set_(this.key_, JSON.stringify(this.cache_));\n      } catch(err) {\n        // Do nothing.\n      }\n    }\n  }\n\n  /**\n   * Clears the data in localStorage for the current store.\n   */\n  clear() {\n    this.cache_ = {};\n    if (Store.isSupported_()) {\n      try {\n        Store.clear_(this.key_);\n      } catch(err) {\n        // Do nothing.\n      }\n    }\n  }\n\n  /**\n   * Removes the store instance for the global instances map. If this is the\n   * last store instance, the storage listener is also removed.\n   * Note: this does not erase the stored data. Use `clear()` for that.\n   */\n  destroy() {\n    delete instances[this.key_];\n    if (!Object.keys(instances).length) {\n      removeStorageListener();\n    }\n  }\n}\n\n\n/**\n * Adds a single storage event listener and flips the global `isListening`\n * flag so multiple events aren't added.\n */\nfunction initStorageListener() {\n  window.addEventListener('storage', storageListener);\n  isListening = true;\n}\n\n\n/**\n * Removes the storage event listener and flips the global `isListening`\n * flag so it can be re-added later.\n */\nfunction removeStorageListener() {\n  window.removeEventListener('storage', storageListener);\n  isListening = false;\n}\n\n\n/**\n * The global storage event listener.\n * @param {!Event} event The DOM event.\n */\nfunction storageListener(event) {\n  const store = instances[event.key];\n  if (store) {\n    const oldData = assign({}, store.defaults_, parse(event.oldValue));\n    const newData = assign({}, store.defaults_, parse(event.newValue));\n\n    store.cache_ = newData;\n    store.emit('externalSet', newData, oldData);\n  }\n}\n\n\n/**\n * Parses a source string as JSON\n * @param {string|null} source\n * @return {!Object} The JSON object.\n */\nfunction parse(source) {\n  let data = {};\n  if (source) {\n    try {\n      data = /** @type {!Object} */ (JSON.parse(source));\n    } catch(err) {\n      // Do nothing.\n    }\n  }\n  return data;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/store.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {USAGE_PARAM, VERSION, VERSION_PARAM} from './constants';\n\n\nexport const plugins = {\n  CLEAN_URL_TRACKER: 1,\n  EVENT_TRACKER: 2,\n  IMPRESSION_TRACKER: 3,\n  MEDIA_QUERY_TRACKER: 4,\n  OUTBOUND_FORM_TRACKER: 5,\n  OUTBOUND_LINK_TRACKER: 6,\n  PAGE_VISIBILITY_TRACKER: 7,\n  SOCIAL_WIDGET_TRACKER: 8,\n  URL_CHANGE_TRACKER: 9,\n  MAX_SCROLL_TRACKER: 10,\n};\n\n\nconst PLUGIN_COUNT = Object.keys(plugins).length;\n\n\n/**\n * Tracks the usage of the passed plugin by encoding a value into a usage\n * string sent with all hits for the passed tracker.\n * @param {!Tracker} tracker The analytics.js tracker object.\n * @param {number} plugin The plugin enum.\n */\nexport function trackUsage(tracker, plugin) {\n  trackVersion(tracker);\n  trackPlugin(tracker, plugin);\n}\n\n\n/**\n * Converts a hexadecimal string to a binary string.\n * @param {string} hex A hexadecimal numeric string.\n * @return {string} a binary numeric string.\n */\nfunction convertHexToBin(hex) {\n  return parseInt(hex || '0', 16).toString(2);\n}\n\n\n/**\n * Converts a binary string to a hexadecimal string.\n * @param {string} bin A binary numeric string.\n * @return {string} a hexadecimal numeric string.\n */\nfunction convertBinToHex(bin) {\n  return parseInt(bin || '0', 2).toString(16);\n}\n\n\n/**\n * Adds leading zeros to a string if it's less than a minimum length.\n * @param {string} str A string to pad.\n * @param {number} len The minimum length of the string\n * @return {string} The padded string.\n */\nfunction padZeros(str, len) {\n  if (str.length < len) {\n    let toAdd = len - str.length;\n    while (toAdd) {\n      str = '0' + str;\n      toAdd--;\n    }\n  }\n  return str;\n}\n\n\n/**\n * Accepts a binary numeric string and flips the digit from 0 to 1 at the\n * specified index.\n * @param {string} str The binary numeric string.\n * @param {number} index The index to flip the bit.\n * @return {string} The new binary string with the bit flipped on\n */\nfunction flipBitOn(str, index) {\n  return str.substr(0, index) + 1 + str.substr(index + 1);\n}\n\n\n/**\n * Accepts a tracker and a plugin index and flips the bit at the specified\n * index on the tracker's usage parameter.\n * @param {Object} tracker An analytics.js tracker.\n * @param {number} pluginIndex The index of the plugin in the global list.\n */\nfunction trackPlugin(tracker, pluginIndex) {\n  const usageHex = tracker.get('&' + USAGE_PARAM);\n  let usageBin = padZeros(convertHexToBin(usageHex), PLUGIN_COUNT);\n\n  // Flip the bit of the plugin being tracked.\n  usageBin = flipBitOn(usageBin, PLUGIN_COUNT - pluginIndex);\n\n  // Stores the modified usage string back on the tracker.\n  tracker.set('&' + USAGE_PARAM, convertBinToHex(usageBin));\n}\n\n\n/**\n * Accepts a tracker and adds the current version to the version param.\n * @param {Object} tracker An analytics.js tracker.\n */\nfunction trackVersion(tracker) {\n  tracker.set('&' + VERSION_PARAM, VERSION);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/usage.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {getAttributes} from 'dom-utils';\nimport MethodChain from './method-chain';\n\n\n/**\n * Accepts default and user override fields and an optional tracker, hit\n * filter, and target element and returns a single object that can be used in\n * `ga('send', ...)` commands.\n * @param {FieldsObj} defaultFields The default fields to return.\n * @param {FieldsObj} userFields Fields set by the user to override the\n *     defaults.\n * @param {Tracker=} tracker The tracker object to apply the hit filter to.\n * @param {Function=} hitFilter A filter function that gets\n *     called with the tracker model right before the `buildHitTask`. It can\n *     be used to modify the model for the current hit only.\n * @param {Element=} target If the hit originated from an interaction\n *     with a DOM element, hitFilter is invoked with that element as the\n *     second argument.\n * @param {(Event|TwttrEvent)=} event If the hit originated via a DOM event,\n *     hitFilter is invoked with that event as the third argument.\n * @return {!FieldsObj} The final fields object.\n */\nexport function createFieldsObj(\n    defaultFields, userFields, tracker = undefined,\n    hitFilter = undefined, target = undefined, event = undefined) {\n  if (typeof hitFilter == 'function') {\n    const originalBuildHitTask = tracker.get('buildHitTask');\n    return {\n      buildHitTask: (/** @type {!Model} */ model) => {\n        model.set(defaultFields, null, true);\n        model.set(userFields, null, true);\n        hitFilter(model, target, event);\n        originalBuildHitTask(model);\n      },\n    };\n  } else {\n    return assign({}, defaultFields, userFields);\n  }\n}\n\n\n/**\n * Retrieves the attributes from an DOM element and returns a fields object\n * for all attributes matching the passed prefix string.\n * @param {Element} element The DOM element to get attributes from.\n * @param {string} prefix An attribute prefix. Only the attributes matching\n *     the prefix will be returned on the fields object.\n * @return {FieldsObj} An object of analytics.js fields and values\n */\nexport function getAttributeFields(element, prefix) {\n  const attributes = getAttributes(element);\n  const attributeFields = {};\n\n  Object.keys(attributes).forEach(function(attribute) {\n    // The `on` prefix is used for event handling but isn't a field.\n    if (attribute.indexOf(prefix) === 0 && attribute != prefix + 'on') {\n      let value = attributes[attribute];\n\n      // Detects Boolean value strings.\n      if (value == 'true') value = true;\n      if (value == 'false') value = false;\n\n      const field = camelCase(attribute.slice(prefix.length));\n      attributeFields[field] = value;\n    }\n  });\n\n  return attributeFields;\n}\n\n\n/**\n * Accepts a function to be invoked once the DOM is ready. If the DOM is\n * already ready, the callback is invoked immediately.\n * @param {!Function} callback The ready callback.\n */\nexport function domReady(callback) {\n  if (document.readyState == 'loading') {\n    document.addEventListener('DOMContentLoaded', function fn() {\n      document.removeEventListener('DOMContentLoaded', fn);\n      callback();\n    });\n  } else {\n    callback();\n  }\n}\n\n\n/**\n * Returns a function, that, as long as it continues to be called, will not\n * actually run. The function will only run after it stops being called for\n * `wait` milliseconds.\n * @param {!Function} fn The function to debounce.\n * @param {number} wait The debounce wait timeout in ms.\n * @return {!Function} The debounced function.\n */\nexport function debounce(fn, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn(...args), wait);\n  };\n}\n\n\n/**\n * Accepts a function and returns a wrapped version of the function that is\n * expected to be called elsewhere in the system. If it's not called\n * elsewhere after the timeout period, it's called regardless. The wrapper\n * function also prevents the callback from being called more than once.\n * @param {!Function} callback The function to call.\n * @param {number=} wait How many milliseconds to wait before invoking\n *     the callback.\n * @return {!Function} The wrapped version of the passed function.\n */\nexport function withTimeout(callback, wait = 2000) {\n  let called = false;\n  const fn = function() {\n    if (!called) {\n      called = true;\n      callback();\n    }\n  };\n  setTimeout(fn, wait);\n  return fn;\n}\n\n// Maps trackers to queue by tracking ID.\nconst queueMap = {};\n\n/**\n * Queues a function for execution in the next call stack, or immediately\n * before any send commands are executed on the tracker. This allows\n * autotrack plugins to defer running commands until after all other plugins\n * are required but before any other hits are sent.\n * @param {!Tracker} tracker\n * @param {!Function} fn\n */\nexport function deferUntilPluginsLoaded(tracker, fn) {\n  const trackingId = tracker.get('trackingId');\n  const ref = queueMap[trackingId] = queueMap[trackingId] || {};\n\n  const processQueue = () => {\n    clearTimeout(ref.timeout);\n    if (ref.send) {\n      MethodChain.remove(tracker, 'send', ref.send);\n    }\n    delete queueMap[trackingId];\n\n    ref.queue.forEach((fn) => fn());\n  };\n\n  clearTimeout(ref.timeout);\n  ref.timeout = setTimeout(processQueue, 0);\n  ref.queue = ref.queue || [];\n  ref.queue.push(fn);\n\n  if (!ref.send) {\n    ref.send = (originalMethod) => {\n      return (...args) => {\n        processQueue();\n        originalMethod(...args);\n      };\n    };\n    MethodChain.add(tracker, 'send', ref.send);\n  }\n}\n\n\n/**\n * A small shim of Object.assign that aims for brevity over spec-compliant\n * handling all the edge cases.\n * @param {!Object} target The target object to assign to.\n * @param {...?Object} sources Additional objects who properties should be\n *     assigned to target. Non-objects are converted to objects.\n * @return {!Object} The modified target object.\n */\nexport const assign = Object.assign || function(target, ...sources) {\n  for (let i = 0, len = sources.length; i < len; i++) {\n    const source = Object(sources[i]);\n    for (let key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\n\n/**\n * Accepts a string containing hyphen or underscore word separators and\n * converts it to camelCase.\n * @param {string} str The string to camelCase.\n * @return {string} The camelCased version of the string.\n */\nexport function camelCase(str) {\n  return str.replace(/[\\-\\_]+(\\w?)/g, function(match, p1) {\n    return p1.toUpperCase();\n  });\n}\n\n\n/**\n * Capitalizes the first letter of a string.\n * @param {string} str The input string.\n * @return {string} The capitalized string\n */\nexport function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\n/**\n * Indicates whether the passed variable is a JavaScript object.\n * @param {*} value The input variable to test.\n * @return {boolean} Whether or not the test is an object.\n */\nexport function isObject(value) {\n  return typeof value == 'object' && value !== null;\n}\n\n\n/**\n * Accepts a value that may or may not be an array. If it is not an array,\n * it is returned as the first item in a single-item array.\n * @param {*} value The value to convert to an array if it is not.\n * @return {!Array} The array-ified value.\n */\nexport function toArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n\n/**\n * @return {number} The current date timestamp\n */\nexport function now() {\n  return +new Date();\n}\n\n\n/*eslint-disable */\n// https://gist.github.com/jed/982883\n/** @param {?=} a */\nexport const uuid = function b(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)};\n/*eslint-enable */\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/autotrack/lib/utilities.js","/**\n * Gets all attributes of an element as a plain JavaScriot object.\n * @param {Element} element The element whose attributes to get.\n * @return {!Object} An object whose keys are the attribute keys and whose\n *     values are the attribute values. If no attributes exist, an empty\n *     object is returned.\n */\nexport default function getAttributes(element) {\n  const attrs = {};\n\n  // Validate input.\n  if (!(element && element.nodeType == 1)) return attrs;\n\n  // Return an empty object if there are no attributes.\n  const map = element.attributes;\n  if (map.length === 0) return {};\n\n  for (let i = 0, attr; attr = map[i]; i++) {\n    attrs[attr.name] = attr.value;\n  }\n  return attrs;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/dom-utils/lib/get-attributes.js","const HTTP_PORT = '80';\nconst HTTPS_PORT = '443';\nconst DEFAULT_PORT = RegExp(':(' + HTTP_PORT + '|' + HTTPS_PORT + ')$');\n\n\nconst a = document.createElement('a');\nconst cache = {};\n\n\n/**\n * Parses the given url and returns an object mimicing a `Location` object.\n * @param {string} url The url to parse.\n * @return {!Object} An object with the same properties as a `Location`.\n */\nexport default function parseUrl(url) {\n  // All falsy values (as well as \".\") should map to the current URL.\n  url = (!url || url == '.') ? location.href : url;\n\n  if (cache[url]) return cache[url];\n\n  a.href = url;\n\n  // When parsing file relative paths (e.g. `../index.html`), IE will correctly\n  // resolve the `href` property but will keep the `..` in the `path` property.\n  // It will also not include the `host` or `hostname` properties. Furthermore,\n  // IE will sometimes return no protocol or just a colon, especially for things\n  // like relative protocol URLs (e.g. \"//google.com\").\n  // To workaround all of these issues, we reparse with the full URL from the\n  // `href` property.\n  if (url.charAt(0) == '.' || url.charAt(0) == '/') return parseUrl(a.href);\n\n  // Don't include default ports.\n  let port = (a.port == HTTP_PORT || a.port == HTTPS_PORT) ? '' : a.port;\n\n  // PhantomJS sets the port to \"0\" when using the file: protocol.\n  port = port == '0' ? '' : port;\n\n  // Sometimes IE incorrectly includes a port for default ports\n  // (e.g. `:80` or `:443`) even when no port is specified in the URL.\n  // http://bit.ly/1rQNoMg\n  const host = a.host.replace(DEFAULT_PORT, '');\n\n  // Not all browser support `origin` so we have to build it.\n  const origin = a.origin ? a.origin : a.protocol + '//' + host;\n\n  // Sometimes IE doesn't include the leading slash for pathname.\n  // http://bit.ly/1rQNoMg\n  const pathname = a.pathname.charAt(0) == '/' ? a.pathname : '/' + a.pathname;\n\n  return cache[url] = {\n    hash: a.hash,\n    host: host,\n    hostname: a.hostname,\n    href: a.href,\n    origin: origin,\n    pathname: pathname,\n    port: port,\n    protocol: a.protocol,\n    search: a.search,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/dom-utils/lib/parse-url.js"],"sourceRoot":""}